#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define POPULATION_SIZE 10
#define NUM_GENERATIONS 20
#define MUTATION_RATE 0.1

// Function to evaluate the fitness of an individual
double objective_function(double x) {
    return x * x;
}

// Function to generate a random number in the given range
double random_double(double min, double max) {
    return min + (rand() / (double)RAND_MAX) * (max - min);
}

// Main function
int main() {
    srand(time(NULL));
    
    // Initialize the population with random values
    double population[POPULATION_SIZE];
    for (int i = 0; i < POPULATION_SIZE; i++) {
        population[i] = random_double(-10.0, 10.0);
    }

    // Main genetic algorithm loop
    for (int generation = 0; generation < NUM_GENERATIONS; generation++) {
        // Evaluate the fitness of each individual in the population
        double fitness_values[POPULATION_SIZE];
        for (int i = 0; i < POPULATION_SIZE; i++) {
            fitness_values[i] = objective_function(population[i]);
        }

        // Select the best individuals to form the next generation
        double mating_pool[POPULATION_SIZE];
        for (int i = 0; i < POPULATION_SIZE; i++) {
            int index = rand() % POPULATION_SIZE;
            mating_pool[i] = population[index];
        }

        // Create the next generation through crossover
        double next_generation[POPULATION_SIZE];
        for (int i = 0; i < POPULATION_SIZE; i += 2) {
            double parent1 = mating_pool[i];
            double parent2 = mating_pool[i + 1];
            double crossover_point = random_double(0.0, 1.0);
            next_generation[i] = crossover_point * parent1 + (1 - crossover_point) * parent2;
            next_generation[i + 1] = crossover_point * parent2 + (1 - crossover_point) * parent1;
        }

        // Apply mutation to the next generation
        for (int i = 0; i < POPULATION_SIZE; i++) {
            if (random_double(0.0, 1.0) < MUTATION_RATE) {
                next_generation[i] += random_double(-1.0, 1.0);
            }
        }

        // Copy the next generation to the population
        for (int i = 0; i < POPULATION_SIZE; i++) {
            population[i] = next_generation[i];
        }

        // Print the best solution in the current generation
        double best_solution = population[0];
        for (int i = 1; i < POPULATION_SIZE; i++) {
            if (objective_function(population[i]) > objective_function(best_solution)) {
                best_solution = population[i];
            }
        }
        printf("Generation %d: Best Solution = %f, Fitness = %f\n", generation + 1, best_solution, objective_function(best_solution));
    }

    // Print the final best solution
    double final_best_solution = population[0];
    for (int i = 1; i < POPULATION_SIZE; i++) {
        if (objective_function(population[i]) > objective_function(final_best_solution)) {
            final_best_solution = population[i];
        }
    }
    printf("Final Best Solution = %f, Fitness = %f\n", final_best_solution, objective_function(final_best_solution));

    return 0;
}
